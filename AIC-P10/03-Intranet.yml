
Parameters:

  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH Key for the OpenVPN Instance
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  PublicIPCIDR:
    Type: String 
    MinLength: '7'
    MaxLength: '18'    
    Default: 0.0.0.0/0
    Description: "Saisir l'IPv4 de votre adresse IPv4 publique au format CIDR. "
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: "Doit etre une adresse valide sous la notation : x.x.x.x/32 "
  
  IntranetIP:
    Type: String
    MinLength: '7'
    MaxLength: '15'
    #IPv4 : 10.0.30.20
    Description: Saisir l'adresse IP du serveur Intranet dans AZC
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: "Doit etre une IP CIDR valide sous la notation : x.x.x.x"

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Selectioner le VPC du projet

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Selectionner le Subnet AZC
 
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro

  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH Key for the OpenVPN Instance
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Mappings:

  RegionMap:
    eu-west-3:
      "UBUNTUAMI" : "ami-096b8af6e7e8fb927" 
      "OPENVPNAMI" : "ami-0b8d6b68595965460"

Resources:
  IntranetInstance:
    Type: "AWS::EC2::Instance"
    Properties:      
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", UBUNTUAMI]
      PrivateIpAddress: !Ref IntranetIP        
      KeyName: !Ref SSHKeyName
      SecurityGroupIds:
        - !Ref SGIntranet
      SubnetId: !Ref SubnetId
      Tags:
      - Key: Name
        Value: Intranet
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              echo 1 > /proc/sys/net/ipv4/ip_forward
              sudo apt update && apt upgrade -y
              sudo apt install  -y apache2
              cd /var/www/html/
              sudo rm index.html
              cat > index.html << EOF
              <h1> Site Intranet </h1>
              EOF
              sudo systemctl start apache2

  SGIntranet: 
    Type:  "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription:  Intranet EC2 security group 
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
    



  VPNInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref SGVPNInstance
      KeyName: !Ref SSHKeyName
      Tags:
        - Key: Name
          Value: ServeurVPN      
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", UBUNTUAMI]
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              sudo cat > /etc/rc.local << EOF
              #! /bin/bash
              echo 1 > /proc/sys/net/ipv4/ip_forward
              iptables -t nat -A POSTROUTING -o eth0 -s 10.0.30.0/24 -j MASQUERADE 
              exit 0
              EOF
              sudo chmod +x /etc/rc.local
              sudo /etc/rc.local
              cat >> /etc/sysctl.conf << EOF
              net.ipv4.ip_forward = 1
              EOF



  SGVPNInstance:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SG for OpenVPN Server
      VpcId: !Ref VPCId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: !Ref PublicIPCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicIPCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicIPCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicIPCIDR
        - IpProtocol: tcp
          FromPort: 943
          ToPort: 943
          CidrIp: !Ref PublicIPCIDR
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Ref PublicIPCIDR
          
  myEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: !Ref VPCId

  IPAssoc:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      InstanceId: !Ref VPNInstance
      EIP: !Ref myEIP
            
Outputs:
  Gateway:
    Description: "Gateway Address"
    Value: !Ref myEIP
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", InternetGatewayId ] ]
