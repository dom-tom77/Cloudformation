## Network preparation for E-Corp's AWS Cloud
# VPC creation
# Creation of 3 subnets 
# Creation of 1 Internet Gateway
# Creation of 1x NAT
# Creation of 3x Route Tables
# Link between subnets and Route Tables
# Creation of the default routes


AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creation du VPC principal de ses sous-reseaux et du VPN

# Initialisation
Parameters:
  PublicLocalSubnet:
    Type: String
    Default : 92.135.144.211
    Description: Saisir l'adresse ip publique

  PrivateLocalSubnet:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.168.1.0/24
    Description: Saisir votre adresse reseau prive. 
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: "Doit etre une IP CIDR valide sous la notation : x.x.x.x/x."

  VpcCidrBlock:
    Type: String
    MinLength: '9'
    MaxLength: '18'    
    Default: 10.0.0.0/16
    Description: Saisir le réseau du VPC.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: "Doit être une adresse valide sous la notation : x.x.x.x/x "

  IntranetIP:
    Type: String
    #IPv4 : 10.0.30.20
    Description: Saisir l'adresse IP du serveur Intranet dans AZC

Resources:

  P10Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: "aic-projet-10"

# Creation du VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: 'P10'
    DependsOn:
      - P10Bucket

# Creation de 3 sous-reseaux (AZA, AZB et AZC)

  SubnetAZA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select [10, !Cidr [ !GetAtt VPC.CidrBlock, 11, 8 ]]
      Tags:
        - Key: Name
          Value: 'MainVPC-AZA'
      VpcId: !Ref VPC

  SubnetAZB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select [20, !Cidr [ !GetAtt VPC.CidrBlock, 21, 8 ]]
      Tags:
        - Key: Name
          Value: 'MainVPC-AZB'
      VpcId: !Ref VPC

  SubnetAZC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select [30, !Cidr [ !GetAtt VPC.CidrBlock, 31, 8 ]]
      Tags:
        - Key: Name
          Value: 'MainVPC-AZC'
      VpcId: !Ref VPC

# Creation de la passerelle Internet 
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'InternetGateway-${AWS::StackName}'
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Creation de l'interface NAT
  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayAZC:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref SubnetAZC
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}

# Creation de 3 tables de routage + Association
  # AZA
  RouteTableAZA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Route-AZA-${AWS::StackName}

  AttachRouteTableAZA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableAZA
      SubnetId: !Ref SubnetAZA

  # AZB
  RouteTableAZB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Route-AZB-${AWS::StackName}

  AttachRouteTableAZB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableAZB
      SubnetId: !Ref SubnetAZB

  # AZC
  RouteTableAZC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Route-AZC-${AWS::StackName}

  AttachRouteTableAZC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableAZC
      SubnetId: !Ref SubnetAZC

# Creation des Routes par défaut
  # AZA
  RouteAZA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableAZA

  # AZB
  RouteAZB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTableAZB

  # AZC
  RouteAZC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZC
      RouteTableId: !Ref RouteTableAZC
 
  #### VPN
    # Customer Gateway
  CustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      BgpAsn: 65000
      IpAddress: !Ref PublicLocalSubnet
      Tags:
        - Key: Name
          Value: Customer-Gateway-${AWS::StackName}
      Type: ipsec.1

  # VPN Gateway
  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: VPN-Gateway-${AWS::StackName}

  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpnGatewayId: !Ref VPNGateway
      VpcId: !Ref VPC

  # VPN Connexion
  VPNConnexion:
    Type : AWS::EC2::VPNConnection
    Properties:
      Type: ipsec.1
      CustomerGatewayId: !Ref CustomerGateway
      StaticRoutesOnly: True
      Tags:
        - Key: Name
          Value: VPN-Connexion-${AWS::StackName}
      VpnGatewayId: !Ref VPNGateway
  
  VPNConnectionRoute:
    Type: AWS::EC2::VPNConnectionRoute
    Properties:
      DestinationCidrBlock: !Ref LocalPrivateSubnet
      VpnConnectionId: !Ref VPNConnexion

  PrivateRouteVPN:
    Type: AWS::EC2::Route
    DependsOn: VPNConnectionRoute
    Properties:
      DestinationCidrBlock: !Ref LocalPrivateSubnet
      GatewayId: !Ref VPNGateway
      RouteTableId: !Ref RouteTableAZC

  IntranetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Intranet security group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref "LocalPrivateSubnet"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref "LocalPrivateSubnet"
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Ref "LocalPrivateSubnet"

      Tags:
        - Key: Name
          Value: IntranetGroup

  IntranetEC2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref AWS::Region
      ImageId: "ami-0e11cbb34015ff725"
      InstanceType: t2.micro
      PrivateIpAddress: !Ref IntranetIP
      SecurityGroupIds:
        - !Ref IntranetSecurityGroup
      SubnetId: !Ref SubnetAZC
      Tags:
        - Key: name
          Value: Intranet Server
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            # Install Apache2
            apt install apache2 -y
            # modifie la page index.html
            echo "<h1>Bienvenue sur l'Intranet</h1>" > /var/www/html/index.html
            # Enable and start service
            systemctl enable apache2
            systemctl start apache2

Outputs:

  AZASubnetCidr:
    Description: AZA's CIDR Subnet block
    Value: !Select [10, !Cidr [ !GetAtt VPC.CidrBlock, 11, 8 ]]
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZACidr ] ]

  AZBSubnetCidr:
    Description: AZB's CIDR Subnet block
    Value: !Select [20, !Cidr [ !GetAtt VPC.CidrBlock, 21, 8 ]]
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZBCidr ] ]

  AZCSubnetCidr:
    Description: AZC's CIDR Subnet block
    Value: !Select [30, !Cidr [ !GetAtt VPC.CidrBlock, 31, 8 ]]
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZCCidr ] ]

  PrivateSubnetCidr:
    Description: Local Subnet Cidr Block 
    Value: !Ref LocalPrivateSubnet
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", LocalPrivateCidr ] ]

  SubnetAZAId:
    Description: The AZA's Subnet ID
    Value: !Ref SubnetAZA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZAId ] ]

  SubnetAZBId:
    Description: The AZB's Subnet ID
    Value: !Ref SubnetAZB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZBId ] ]

  SubnetAZCId:
    Description: The AZC's Subnet ID
    Value: !Ref SubnetAZC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZCId ] ]

  AddressEIP:
    Description: Elastic IP Address
    Value: !Ref NatEip
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", NatEipId ] ]
  
  Gateway:
    Description: Gateway Address
    Value: !Ref   InternetGateway
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", InternetGatewayId ] ]