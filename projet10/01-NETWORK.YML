
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creation du VPC principal de ses sous-reseaux et du VPN
# Initialisation
Parameters:


  PublicAddress:
    Type: String
    MinLength: '9'
    MaxLength: '18'    
    Default : 92.135.144.211/32
    Description: Saisir l'adresse ip publique
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: "Doit être une adresse valide sous la notation : x.x.x.x/x "

  VpcCidrBlock:
    Type: String
    MinLength: '9'
    MaxLength: '18'    
    Default: 10.0.0.0/16
    Description: Saisir le réseau du VPC.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: "Doit être une adresse valide sous la notation : x.x.x.x/x "

  InstanceAMI:
    Description: Subnet AZC 
    Type: String
    Default: "ami-0e11cbb34015ff725"

  InstanceType:
    Description: OpenVPN Instance Type
    Type: String
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    Default: t2.micro

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  AdminPassword:
    Description: OpenVPN Admin Password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 32
    ConstraintDescription: Must be at least 8 chars long

  RouteAllTraffic:
    Description: Should all local traffic go over VPN when connected?
    Type: Number
    AllowedValues:
      - 0
      - 1
    Default: 1

  UseVPNDNS:
    Description: Should client use VPN supplied DNS when connected?
    Type: Number
    AllowedValues:
      - 0
      - 1
    Default: 1

Resources:

  P10Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: "aic-projet-10"

# Creation du VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: 'P10'
    DependsOn:
      - P10Bucket

  SubnetAZA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
#      CidrBlock: !Select [10, !Cidr [ !GetAtt myVPC.CidrBlock, 11, 8 ]]
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: 'myVPC-AZA'
      VpcId: !Ref myVPC

  SubnetAZB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
#      CidrBlock: !Select [20, !Cidr [ !GetAtt myVPC.CidrBlock, 21, 8 ]]
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: 'myVPC-AZB'
      VpcId: !Ref myVPC
  SubnetAZC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref AWS::Region
#      CidrBlock: !Select [30, !Cidr [ !GetAtt myVPC.CidrBlock, 31, 8 ]]
      CidrBlock: 10.0.30.0/24
      Tags:
        - Key: Name
          Value: 'myVPC-AZC'
      VpcId: !Ref myVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'InternetGateway-${AWS::StackName}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
     
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTableAZC
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTableAZA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Route-AZA-${AWS::StackName}

  RouteTableAZB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Route-AZB-${AWS::StackName} 

  RouteTableAZC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Route-AZC-${AWS::StackName} 

  SubnetRouteTableAssociationAZA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableAZA
      SubnetId: !Ref SubnetAZA

  SubnetRouteTableAssociationAZB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableAZB
      SubnetId: !Ref SubnetAZB

  SubnetRouteTableAssociationAZC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetAZC
      RouteTableId: !Ref RouteTable

  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: "vpc"

  OpenVPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: Security group for OpenVPN Server
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "0.0.0.0/0"
#       CidrIp: "PublicAddress"  
      - IpProtocol: tcp
        FromPort: 943
        ToPort: 943
        CidrIp: "0.0.0.0/0"
#       CidrIp: "PublicAddress"  
      - IpProtocol: udp
        FromPort: 1194
        ToPort: 1194
        CidrIp: "0.0.0.0/0"
#       CidrIp: "PublicAddress"  
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: "0.0.0.0/0"
#       CidrIp: "PublicAddress"  

      SecurityGroupEgress:
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: "0.0.0.0/0"
#       CidrIp: "PublicAddress"  

  OpenVPNInstance:
    Type: AWS::EC2::Instance
    DependsOn: NatEip
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - !Ref OpenVPNSecurityGroup
      SubnetId: !Ref SubnetAZC
      Tags:
       - Key: Name
         Value: OpenVPN Instance
      UserData:
        Fn::Base64: !Sub |
          public_hostname=${NatEip}
          admin_user=openvpn
          admin_pw=${AdminPassword}
          reroute_gw=${RouteAllTraffic}
          reroute_dns=${UseVPNDNS}

  IPAssociaton:
    Type: AWS::EC2::EIPAssociation
    DependsOn: OpenVPNInstance
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      InstanceId: !Ref OpenVPNInstance


Outputs:

  AZASubnetCidr:
    Description: AZA's CIDR Subnet block
    Value: !Select [10, !Cidr [ !GetAtt myVPC.CidrBlock, 11, 8 ]]
#    Value: 10.0.10.0/24
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZACidr ] ]

  AZBSubnetCidr:
    Description: AZB's CIDR Subnet block
    Value: !Select [20, !Cidr [ !GetAtt myVPC.CidrBlock, 21, 8 ]]
#    Value: 10.0.20.0/24
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZBCidr ] ]

  AZCSubnetCidr:
    Description: AZC's CIDR Subnet block
    Value: !Select [30, !Cidr [ !GetAtt myVPC.CidrBlock, 31, 8 ]]
#    Value: 10.0.30.0/24
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZCCidr ] ]

  SubnetAZAId:
    Description: The AZA's Subnet ID
    Value: !Ref SubnetAZA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZAId ] ]

  SubnetAZBId:
    Description: The AZB's Subnet ID
    Value: !Ref SubnetAZB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZBId ] ]

  SubnetAZCId:
    Description: The AZC's Subnet ID
    Value: !Ref SubnetAZC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetAZCId ] ]

  AddressEIP:
    Description: Elastic IP Address
    Value: !Ref NatEip
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", NatEipId ] ]

  PublicAddressCidr:
    Description: Local Subnet Cidr Block 
    Value: !Ref PublicAddress
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicAddressCidr ] ]

  RouteTableAZA:
    Description: The AZA's Route ID
    Value: !Ref RouteTableAZA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", RouteTableAZAid ] ]

  RouteTableAZB:
    Description: The AZB's Route ID
    Value: !Ref RouteTableAZB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", RouteTableAZBid ] ]

  RouteTableAZC:
    Description: The AZC's Route ID
    Value: !Ref RouteTableAZC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", RouteTableAZCid ] ]

  VPCId:
    Description: VPC ID
    Value: !Ref myVPC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPCId ] ]

  Gateway:
    Description: Gateway Address
    Value: !Ref   InternetGateway
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", InternetGatewayId ] ]
