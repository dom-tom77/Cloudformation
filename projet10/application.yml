AWSTemplateFormatVersion: '2010-09-09'





Parameters:

  NetworkStackName:
    Type: String
    Description: "Nom de la pile "Network""
    #default: Network

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Selectioner le VPC du projet

  SubnetId:
    Type: list <AWS::EC2::Subnet::Id>
    Description: Selectionner les Subnet AZA et AZB

Resources:

  ScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties: 
      AutoScalingGroupName: !Sub '${AWS::StackName}-Scaling-Group'
      LaunchConfigurationName: !Ref LaunchConf
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 2
      AvailabilityZones:
        - !Sub ${Region}a
        - !Sub ${Region}b
      VPCZoneIdentifier: 
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags: 
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub '${AWS::StackName}-Docker-Wordpress'
    DependsOn:
      - LaunchConf
      - TargetGroup

  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ScalingGroup
      EstimatedInstanceWarmup: 240
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 10
          ScalingAdjustment: 1

  Alarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: TRUE
      AlarmActions: 
        - !Ref ScalingPolicy
      AlarmDescription: 'Alarm when the CPU is above 80%'
      AlarmName: !Sub '${AWS::StackName}-Alarm'
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref ScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 80

  AlarmMail:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: TRUE
      AlarmActions: 
        - !Ref SNSTopic
      AlarmDescription: 'Alarm when the CPU is above 80% send mail'
      AlarmName: !Sub '${AWS::StackName}-Alarm-mail'
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref ScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 80

  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: 'Message send by the alarm'
      Tags: 
        - Key: name
          Value: !Sub '${AWS::StackName}-Topic created'
      TopicName: !Sub '${AWS::StackName}-Topic'

  SNSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: dmilliez@gmail.com
      Protocol: email
      TopicArn: !Ref SNSTopic
      Region: !Ref Region

  LaunchConf:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties: 
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
      EbsOptimized: false
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceMonitoring: false
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref InstanceKeyNameParameter
      LaunchConfigurationName: !Sub '${AWS::StackName}-Launch-Conf'
      SecurityGroups: 
        - !Ref SecurityGroupInstance
      UserData:
        Fn::Base64:
          Fn::Sub: |
              #!/bin/bash
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)  stable"
              apt-get update
              apt-get -y install docker-ce docker-ce-cli containerd.io nfs-common mysql-client
              cd /root
              mkdir /root/.aws
              echo -e "[default]\naws_access_key_id = ?????????\naws_secret_access_key = ??????????" > /root/.aws/credentials
              docker run --name DockerWP-R7 -v /var/www/html:/var/www/html -e WORDPRESS_DB_HOST=db.host.fr:3306 -e WORDPRESS_DB_USER=user -e WORDPRESS_DB_PASSWORD=user_password -e WORDPRESS_TABLE_PREFIX=db_ -p 80:80 -d wordpress
              docker run --name AWS -v /root/.aws:/root/.aws -v /root:/aws -d amazon/aws-cli s3 cp s3://bucket-of--project/plugins.tar.gz plugins.tar.gz
              sleep 5
              tar xzf /root/plugins.tar.gz -C /
    DependsOn:
      - R53RecordRDS

  ELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties: 
      IpAddressType: ipv4
      Name: !Sub '${AWS::StackName}-ELB'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecuritGroupELB
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB'
      Type: application

  SecuritGroupELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: The security group for the ELB
      GroupName: !Sub '${AWS::StackName}-SG-ELB'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SG-ELB'
      VpcId: !Ref VPCId
    DependsOn:
      - VPCId

  Listener80:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties: 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: "HTTP"
    DependsOn:
      - ELB

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties: 
      Name: !Sub '${AWS::StackName}-Target-Group'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Target-Group'
      VpcId: !Ref VPCId
    DependsOn:
      - VPCId

  R53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: ZZZZZZZZ
      Name: !Ref domainname
      TTL: 60
      Type: CNAME
      ResourceRecords: 
        - !GetAtt ELB.DNSName
    DependsOn:
      - ELB

  R53RecordRDS:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: ZZZZZZZ
      Name: db.host.fr.
      TTL: 60
      Type: CNAME
      ResourceRecords: 
        - !GetAtt RDSDB.Endpoint.Address
    DependsOn:
      - RDSDB

  SubGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB Subnet group avec 2 subnet'
      DBSubnetGroupName: !Sub '${AWS::StackName}-subnet-group-DB'
      SubnetIds: 
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-Subnet-Group-DB'

  SecurityGroupRDS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: The security group for the RDS
      GroupName: !Sub '${AWS::StackName}-SG-RDS'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupInstance
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SG-RDS'
      VpcId: !Ref VPCId
    DependsOn:
      - VPCId

  RDSDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AutoMinorVersionUpgrade: false
      AllocatedStorage: 20
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref SubGroup
      DBInstanceClass: !Ref DBTypeParameter
      DBInstanceIdentifier: !Sub '${AWS::StackName}-DataBase'
      DBSnapshotIdentifier: arn:aws:rds:xxxxx:snapshot:database-wordpress-multi-az
      Engine: mysql
      MultiAZ: true
      OptionGroupName: for-
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups: 
        - !Ref SecurityGroupRDS
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDS-DataBase-from-snapshot'
    DependsOn:
      - SecurityGroupRDS
      - SubGroup

  RDSREPLI:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AutoMinorVersionUpgrade: false
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBTypeParameter
      DBInstanceIdentifier: !Sub '${AWS::StackName}-Replica'
      SourceDBInstanceIdentifier: !Ref RDSDB
      StorageType: gp2
      VPCSecurityGroups: 
        - !Ref SecurityGroupRDS
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-REPLICA' 
    DependsOn:
      - RDSDB
      - SecurityGroupRDS
