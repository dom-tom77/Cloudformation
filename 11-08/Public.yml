AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Configuration du subnet Public

Parameters:
  
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Selectioner le VPC du projet

  ListSubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Selectionner le Subnet AZA et AZB

  DBTypeParameter: 
    Type: String
    Default: db.t2.small

Mappings:

  RegionMap:
    eu-west-3:
      "AMAZONLINUXAMI" : "ami-0e0dc92b2cc01f6ef" 
      "OPENVPNAMI" : "ami-0b8d6b68595965460"
      
Resources:

  EC2SecurityGroupELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCId

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMAZONLINUXAMI]
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroupELB
      UserData:
        Fn::Base64:
          Fn::Sub: |
              #!/bin/bash
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)  stable"
              apt-get update
              apt-get -y install docker-ce docker-ce-cli containerd.io nfs-common mysql-client
              cd /root
              mkdir /root/.aws
              echo -e "[default]\naws_access_key_id = Azerty11\naws_secret_access_key = Azerty11" > /root/.aws/credentials
              docker run --name DockerWP-R7 -v /var/www/html:/var/www/html -e WORDPRESS_DB_HOST=db.host.fr:3306 -e WORDPRESS_DB_USER=user -e WORDPRESS_DB_PASSWORD=user_password -e WORDPRESS_TABLE_PREFIX=db_ -p 80:80 -d wordpress
              docker run --name AWS -v /root/.aws:/root/.aws -v /root:/aws -d amazon/aws-cli s3 cp s3://bucket-of-p10-project/plugins.tar.gz plugins.tar.gz
              sleep 5
              tar xzf /root/plugins.tar.gz -C /

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier: !Ref ListSubnetId
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 1
      TargetGroupARNs:
        - !Ref TargetGroup

  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      EstimatedInstanceWarmup: 240
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments: 
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 10
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 10
          ScalingAdjustment: 1

  Alarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: TRUE
      AlarmActions: 
        - !Ref ScalingPolicy
      AlarmDescription: 'Alarm when the CPU is above 80%'
      AlarmName: !Sub '${AWS::StackName}-Alarm'
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 80

  Topic:
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: 'Message send by the alarm'
      Tags: 
        - Key: name
          Value: !Sub '${AWS::StackName}-Topic created'
      TopicName: !Sub '${AWS::StackName}-Topic' 

  Subscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: dmilliez@gmail.com
      Protocol: email
      TopicArn: !Ref Topic
      Region: !Ref AWS::Region



  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref InstancesSecurityGroup
      Subnets: !Ref ListSubnetId

  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG pour les Instances 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCId

  LoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup


#######

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB Subnet group avec 2 subnet'
      DBSubnetGroupName: !Sub '${AWS::StackName}-subnet-group-DB'
      SubnetIds: !Ref ListSubnetId
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-Subnet-Group-DB'

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG pour le RDS
      GroupName: !Sub '${AWS::StackName}-SG-RDS'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstancesSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SG-RDS'
      VpcId: !Ref VPCId

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBSecurityGroups: 
        - DBSubnetGroup
      AllocatedStorage: '20'
      BackupRetentionPeriod: 1
      MasterUsername: wordpress
      MasterUserPassword: Azerty11
      
      AutoMinorVersionUpgrade: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceClass: !Ref DBTypeParameter
      DBInstanceIdentifier: !Sub '${AWS::StackName}-DataBase'
      DBSnapshotIdentifier: arn:aws:rds:eu-west-3:788347226260:og:default:mariadb-10-4
      Engine: mariadb
      MultiAZ: true
      OptionGroupName: AIC-P10
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDS-DataBase-from-snapshot'
    DependsOn:
      - RDSSecurityGroup
      - DBSubnetGroup

  RDSREPLICA:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AutoMinorVersionUpgrade: false
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBTypeParameter
      DBInstanceIdentifier: !Sub '${AWS::StackName}-Replica'
      SourceDBInstanceIdentifier: !Ref DBInstance
      StorageType: gp2
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-REPLICA' 
    DependsOn:
      - DBInstance
      - RDSSecurityGroup
